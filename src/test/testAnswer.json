{
    "answer": "Bitcoin Core validates transactions through a multi-phase process primarily implemented in **src/validation.cpp**. The main entry point is the `AcceptToMemoryPool()` function, which orchestrates the validation pipeline before transactions enter the mempool.\n\n## Primary Validation Flow\n\nThe validation occurs in the `AcceptToMemoryPool()` function in **src/validation.cpp**:\n\n```cpp\nbool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, \n                       const CTransactionRef& ptx, bool bypass_limits)\n{\n    AssertLockHeld(cs_main);\n\n    // Basic transaction checks\n    if (!CheckTransaction(*ptx, state)) {\n        return false;\n    }\n\n    // Check for conflicts with in-memory transactions\n    for (const CTxIn &txin : ptx->vin) {\n        if (pool.exists(txin.prevout.hash)) {\n            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \n                               \"txn-mempool-conflict\");\n        }\n    }\n\n    return true;\n}\n```\n\n## Three-Phase Validation Process\n\n### 1. Basic Format Validation\nThe `CheckTransaction()` function (also in **src/validation.cpp**) performs initial format checks:\n- Verifies inputs and outputs exist and are properly formatted\n- Validates that amounts are within valid ranges (not negative, not exceeding MAX_MONEY)\n- Ensures transaction size is within consensus limits\n- Checks for duplicate inputs within the same transaction\n\n### 2. Script Validation\nScript validation occurs through the script interpreter in **src/script/interpreter.cpp**:\n- Executes input scripts against their corresponding output scripts\n- Validates ECDSA signatures using cryptographic functions\n- Verifies all script opcodes are valid and execution succeeds\n- Implements various script types (P2PKH, P2SH, P2WPKH, P2WSH, etc.)\n\n### 3. Consensus Rule Validation\nThe final phase ensures transactions follow Bitcoin's consensus rules:\n- Verifies inputs reference valid, unspent UTXOs from the UTXO set\n- Confirms input amounts are greater than or equal to output amounts (accounting for fees)\n- Validates against current consensus parameters and soft fork rules\n- Checks transaction finality and locktime constraints\n\n## Mempool Integration\n\nThe **CTxMemPool** class (defined in **src/txmempool.h**) provides thread-safe storage with conflict detection:\n\n- **Thread Safety**: Protected by the `cs` recursive mutex to handle concurrent access\n- **Conflict Detection**: The loop checking `pool.exists(txin.prevout.hash)` prevents double-spending\n- **Fee-based Prioritization**: Transactions are indexed by fee rate for efficient mining selection\n- **Memory Management**: Configurable size limits prevent DoS attacks\n\n## Key Files and Functions to Explore\n\n- **src/validation.cpp**: `AcceptToMemoryPool()`, `CheckTransaction()`, `CheckInputs()`\n- **src/txmempool.cpp**: `CTxMemPool::addUnchecked()`, `CTxMemPool::removeRecursive()`\n- **src/script/interpreter.cpp**: `EvalScript()`, `VerifyScript()`\n- **src/consensus/validation.h**: `TxValidationResult` enum definitions\n\n## Performance Considerations\n\nBitcoin Core implements several optimizations:\n- **Signature Caching**: Previously validated signatures are cached to avoid re-computation\n- **Parallel Validation**: Script validation can be parallelized across multiple threads\n- **Early Termination**: Invalid transactions are rejected as early as possible in the pipeline\n\nFor deeper understanding of mempool mechanics, reference the [Bitcoin Optech mempool guide](https://bitcoinops.org/mempool-guide) and explore the interaction between **src/validation.cpp** and **src/txmempool.cpp** in the codebase.",
    "context_documents": 3,
    "question": "How does bitcoin core validate transactions?",
    "sources_used": [
        "developer-notes.md",
        "bitcoinops.org/mempool-guide",
        "src/validation.cpp"
    ],
    "success": true
}